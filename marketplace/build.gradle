plugins {
    id 'java'
    // Spring Boot 플러그인 (버전 3.4.1 사용)
    id 'org.springframework.boot' version '3.4.1'
    // Spring Dependency Management 플러그인 (의존성 관리를 위해)
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'store.carjava'  // 그룹 ID 설정
version = '0.0.1-SNAPSHOT' // 애플리케이션 버전 설정

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17) // Java 17 사용
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor // 컴파일 전용 의존성에 어노테이션 프로세서를 포함
    }
}

repositories {
    mavenCentral() // Maven Central 저장소에서 의존성 검색
}

dependencies {
    // Thymeleaf : 관리자 페이지를 위한 의존성 설정
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // Thymeleaf-Dialect : 관리자 페이지 템플릿 레이아웃 구조 설정
    implementation group: 'nz.net.ultraq.thymeleaf', name: 'thymeleaf-layout-dialect', version: '3.3.0'

    /* [ Swagger ] Spring Doc 2.8.1  */
    // Swagger를 사용하여 API 문서화 (Spring Boot 통합)
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.1'

    // Spring Data JPA: 데이터베이스와의 상호작용 (ORM 기능 제공)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Spring Security: 보안 기능 (인증 및 권한 관리)
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // OAuth2 리소스 서버: JWT 검증 및 권한 처리
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    // Spring Web: RESTful 웹 애플리케이션을 개발하기 위한 기본 구성
    implementation 'org.springframework.boot:spring-boot-starter-web'

    /* [ JWT ] */
    // JWT (JSON Web Token): 토큰 기반 인증을 위한 라이브러리
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'

    // Spring DevTools: 개발 중 자동 재시작 및 빠른 로딩 지원
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // JWT 구현체 (구체적인 JWT 처리 로직 제공)
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'

    // JWT와 Jackson 통합 (JSON 파싱 및 직렬화/역직렬화 지원)
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Lombok: 코드 생성 도구 (Getter, Setter, Builder 등 자동 생성)
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok' // Lombok 어노테이션 프로세서

    // MySQL: MySQL 데이터베이스 드라이버
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Spring Boot Test: 통합 테스트와 단위 테스트를 지원
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Spring Security Test: 보안 관련 테스트를 위한 도구
    testImplementation 'org.springframework.security:spring-security-test'

    // JUnit 플랫폼 런처: JUnit 테스트 실행 지원
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    /* [ Query DSL ] */
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}
// Querydsl 설정 - generated 폴더 설정 및 소스 디렉토리에 추가
def querydslSrcDir = file("src/main/generated")

sourceSets {
    main.java.srcDirs += querydslSrcDir
}

clean {
    delete querydslSrcDir
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = querydslSrcDir
}

tasks.named('test') {
    useJUnitPlatform() // JUnit 플랫폼을 사용하여 테스트 실행
}
